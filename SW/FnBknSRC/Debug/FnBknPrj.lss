
FnBknPrj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000037c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a2  00800060  0000037c  00000410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800102  00800102  000004b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b4  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000060b  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000497  00000000  00000000  0000143f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  000018d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031a  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004fb  00000000  00000000  00001cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000021b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	28 c0       	rjmp	.+80     	; 0x52 <__ctors_end>
   2:	42 c0       	rjmp	.+132    	; 0x88 <__bad_interrupt>
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	40 c0       	rjmp	.+128    	; 0x88 <__bad_interrupt>
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	3e c0       	rjmp	.+124    	; 0x88 <__bad_interrupt>
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	3c c0       	rjmp	.+120    	; 0x88 <__bad_interrupt>
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	3a c0       	rjmp	.+116    	; 0x88 <__bad_interrupt>
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	38 c0       	rjmp	.+112    	; 0x88 <__bad_interrupt>
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	36 c0       	rjmp	.+108    	; 0x88 <__bad_interrupt>
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	1b c1       	rjmp	.+566    	; 0x256 <puts_cw+0x34>
  20:	18 c1       	rjmp	.+560    	; 0x252 <puts_cw+0x30>
  22:	5f c1       	rjmp	.+702    	; 0x2e2 <__stack+0x83>
  24:	5e c1       	rjmp	.+700    	; 0x2e2 <__stack+0x83>
  26:	5d c1       	rjmp	.+698    	; 0x2e2 <__stack+0x83>
  28:	5c c1       	rjmp	.+696    	; 0x2e2 <__stack+0x83>
  2a:	5b c1       	rjmp	.+694    	; 0x2e2 <__stack+0x83>
  2c:	51 c1       	rjmp	.+674    	; 0x2d0 <__stack+0x71>
  2e:	59 c1       	rjmp	.+690    	; 0x2e2 <__stack+0x83>
  30:	58 c1       	rjmp	.+688    	; 0x2e2 <__stack+0x83>
  32:	57 c1       	rjmp	.+686    	; 0x2e2 <__stack+0x83>
  34:	41 c1       	rjmp	.+642    	; 0x2b8 <__stack+0x59>
  36:	46 c1       	rjmp	.+652    	; 0x2c4 <__stack+0x65>
  38:	54 c1       	rjmp	.+680    	; 0x2e2 <__stack+0x83>
  3a:	53 c1       	rjmp	.+678    	; 0x2e2 <__stack+0x83>
  3c:	52 c1       	rjmp	.+676    	; 0x2e2 <__stack+0x83>
  3e:	51 c1       	rjmp	.+674    	; 0x2e2 <__stack+0x83>
  40:	50 c1       	rjmp	.+672    	; 0x2e2 <__stack+0x83>
  42:	4f c1       	rjmp	.+670    	; 0x2e2 <__stack+0x83>
  44:	4e c1       	rjmp	.+668    	; 0x2e2 <__stack+0x83>
  46:	33 c1       	rjmp	.+614    	; 0x2ae <__stack+0x4f>
  48:	4c c1       	rjmp	.+664    	; 0x2e2 <__stack+0x83>
  4a:	4b c1       	rjmp	.+662    	; 0x2e2 <__stack+0x83>
  4c:	4a c1       	rjmp	.+660    	; 0x2e2 <__stack+0x83>
  4e:	49 c1       	rjmp	.+658    	; 0x2e2 <__stack+0x83>
  50:	10 c1       	rjmp	.+544    	; 0x272 <__stack+0x13>

00000052 <__ctors_end>:
  52:	11 24       	eor	r1, r1
  54:	1f be       	out	0x3f, r1	; 63
  56:	cf e5       	ldi	r28, 0x5F	; 95
  58:	d2 e0       	ldi	r29, 0x02	; 2
  5a:	de bf       	out	0x3e, r29	; 62
  5c:	cd bf       	out	0x3d, r28	; 61

0000005e <__do_copy_data>:
  5e:	11 e0       	ldi	r17, 0x01	; 1
  60:	a0 e6       	ldi	r26, 0x60	; 96
  62:	b0 e0       	ldi	r27, 0x00	; 0
  64:	ec e7       	ldi	r30, 0x7C	; 124
  66:	f3 e0       	ldi	r31, 0x03	; 3
  68:	02 c0       	rjmp	.+4      	; 0x6e <__do_copy_data+0x10>
  6a:	05 90       	lpm	r0, Z+
  6c:	0d 92       	st	X+, r0
  6e:	a2 30       	cpi	r26, 0x02	; 2
  70:	b1 07       	cpc	r27, r17
  72:	d9 f7       	brne	.-10     	; 0x6a <__do_copy_data+0xc>

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a2 e0       	ldi	r26, 0x02	; 2
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	02 d0       	rcall	.+4      	; 0x8a <main>
  86:	78 c1       	rjmp	.+752    	; 0x378 <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <main>:
////////////////////////////////////////////////////

int main(void)
{

	PORTB = PORTB & ~KEY;						// Init PORTB & set for output
  8a:	c0 98       	cbi	0x18, 0	; 24
	DDRB = DDRB | KEY | PWR1| PWR2| TONE;
  8c:	87 b3       	in	r24, 0x17	; 23
  8e:	8d 61       	ori	r24, 0x1D	; 29
  90:	87 bb       	out	0x17, r24	; 23
	wpmg(30);									// init speed
  92:	8e e1       	ldi	r24, 0x1E	; 30
  94:	07 d0       	rcall	.+14     	; 0xa4 <wpmg>
	while(1)
	{
		puts_cw("z20h VVV DE KE0FF/B EM10GOa0b2 mb2 lb2a5", wpmg(0));
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	05 d0       	rcall	.+10     	; 0xa4 <wpmg>
  9a:	68 2f       	mov	r22, r24
  9c:	88 ed       	ldi	r24, 0xD8	; 216
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	c0 d0       	rcall	.+384    	; 0x222 <puts_cw>
  a2:	f9 cf       	rjmp	.-14     	; 0x96 <main+0xc>

000000a4 <wpmg>:
//-----------------------------------------------------------------------------
//	wpmg() sets global wpm register if >=5.  Returns current value on exit
//-----------------------------------------------------------------------------
char wpmg(char wpm   /* int wpm */ )
{
	if(wpm >= MIN_WPM){
  a4:	85 30       	cpi	r24, 0x05	; 5
  a6:	10 f0       	brcs	.+4      	; 0xac <wpmg+0x8>
		wpm_reg = wpm;
  a8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	}
	return wpm_reg;
}
  ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  b0:	08 95       	ret

000000b2 <cw_key>:
//		silent.  If the keying circuit uses inverse logic, it would be inverted
//		here (as in this example). 
//-----------------------------------------------------------------------------
void cw_key(char key   /* transmit on or off */ )
{
	if(key != ON){
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	11 f0       	breq	.+4      	; 0xba <cw_key+0x8>
		PORTB = PORTB & ~KEY;					// cwkey = 0;
  b6:	c0 98       	cbi	0x18, 0	; 24
  b8:	08 95       	ret
	}else{
		PORTB = PORTB | KEY;					// cwkey = 1;
  ba:	c0 9a       	sbi	0x18, 0	; 24
  bc:	08 95       	ret

000000be <cw_delay>:
//                 = (1200 / N) (ms/dit)
//
//
//-----------------------------------------------------------------------------
void cw_delay(char element_len, char wpm)
{
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	29 97       	sbiw	r28, 0x09	; 9
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	cd bf       	out	0x3d, r28	; 61
  d4:	18 2f       	mov	r17, r24
	volatile long int base; // calibrated for att-85
	volatile long int i;
	volatile char j;

	if(wpm){
  d6:	66 23       	and	r22, r22
  d8:	71 f0       	breq	.+28     	; 0xf6 <cw_delay+0x38>
		base = 28387L / (long int)wpm;		// calibrated for att-85
  da:	26 2f       	mov	r18, r22
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	63 ee       	ldi	r22, 0xE3	; 227
  e4:	7e e6       	ldi	r23, 0x6E	; 110
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	08 d1       	rcall	.+528    	; 0x2fc <__divmodsi4>
  ec:	29 83       	std	Y+1, r18	; 0x01
  ee:	3a 83       	std	Y+2, r19	; 0x02
  f0:	4b 83       	std	Y+3, r20	; 0x03
  f2:	5c 83       	std	Y+4, r21	; 0x04
  f4:	08 c0       	rjmp	.+16     	; 0x106 <cw_delay+0x48>
	}else{
		base = 23655L;						// 1 sec
  f6:	87 e6       	ldi	r24, 0x67	; 103
  f8:	9c e5       	ldi	r25, 0x5C	; 92
  fa:	a0 e0       	ldi	r26, 0x00	; 0
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	89 83       	std	Y+1, r24	; 0x01
 100:	9a 83       	std	Y+2, r25	; 0x02
 102:	ab 83       	std	Y+3, r26	; 0x03
 104:	bc 83       	std	Y+4, r27	; 0x04
	}
	// do a delay * the base value
	for(j = 0; j < element_len; j++){
 106:	19 86       	std	Y+9, r1	; 0x09
 108:	89 85       	ldd	r24, Y+9	; 0x09
 10a:	81 17       	cp	r24, r17
 10c:	78 f5       	brcc	.+94     	; 0x16c <cw_delay+0xae>
		for(i = 0; i < base; i++){
 10e:	1d 82       	std	Y+5, r1	; 0x05
 110:	1e 82       	std	Y+6, r1	; 0x06
 112:	1f 82       	std	Y+7, r1	; 0x07
 114:	18 86       	std	Y+8, r1	; 0x08
 116:	4d 81       	ldd	r20, Y+5	; 0x05
 118:	5e 81       	ldd	r21, Y+6	; 0x06
 11a:	6f 81       	ldd	r22, Y+7	; 0x07
 11c:	78 85       	ldd	r23, Y+8	; 0x08
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	9a 81       	ldd	r25, Y+2	; 0x02
 122:	ab 81       	ldd	r26, Y+3	; 0x03
 124:	bc 81       	ldd	r27, Y+4	; 0x04
 126:	48 17       	cp	r20, r24
 128:	59 07       	cpc	r21, r25
 12a:	6a 07       	cpc	r22, r26
 12c:	7b 07       	cpc	r23, r27
 12e:	c4 f4       	brge	.+48     	; 0x160 <cw_delay+0xa2>
 130:	8d 81       	ldd	r24, Y+5	; 0x05
 132:	9e 81       	ldd	r25, Y+6	; 0x06
 134:	af 81       	ldd	r26, Y+7	; 0x07
 136:	b8 85       	ldd	r27, Y+8	; 0x08
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	a1 1d       	adc	r26, r1
 13c:	b1 1d       	adc	r27, r1
 13e:	8d 83       	std	Y+5, r24	; 0x05
 140:	9e 83       	std	Y+6, r25	; 0x06
 142:	af 83       	std	Y+7, r26	; 0x07
 144:	b8 87       	std	Y+8, r27	; 0x08
 146:	4d 81       	ldd	r20, Y+5	; 0x05
 148:	5e 81       	ldd	r21, Y+6	; 0x06
 14a:	6f 81       	ldd	r22, Y+7	; 0x07
 14c:	78 85       	ldd	r23, Y+8	; 0x08
 14e:	89 81       	ldd	r24, Y+1	; 0x01
 150:	9a 81       	ldd	r25, Y+2	; 0x02
 152:	ab 81       	ldd	r26, Y+3	; 0x03
 154:	bc 81       	ldd	r27, Y+4	; 0x04
 156:	48 17       	cp	r20, r24
 158:	59 07       	cpc	r21, r25
 15a:	6a 07       	cpc	r22, r26
 15c:	7b 07       	cpc	r23, r27
 15e:	44 f3       	brlt	.-48     	; 0x130 <cw_delay+0x72>
		base = 28387L / (long int)wpm;		// calibrated for att-85
	}else{
		base = 23655L;						// 1 sec
	}
	// do a delay * the base value
	for(j = 0; j < element_len; j++){
 160:	89 85       	ldd	r24, Y+9	; 0x09
 162:	8f 5f       	subi	r24, 0xFF	; 255
 164:	89 87       	std	Y+9, r24	; 0x09
 166:	89 85       	ldd	r24, Y+9	; 0x09
 168:	81 17       	cp	r24, r17
 16a:	88 f2       	brcs	.-94     	; 0x10e <cw_delay+0x50>
		for(i = 0; i < base; i++){
			continue;
		}
	}
	return;
}
 16c:	29 96       	adiw	r28, 0x09	; 9
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	de bf       	out	0x3e, r29	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	cd bf       	out	0x3d, r28	; 61
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	08 95       	ret

00000180 <putchar_cw>:
//	wpm = morse speed in words per minute based on the conventional 50 dits/word
//		definition.  A value of 0 aborts the function resulting in no key out
//		activity.  Thus, wpm = 0 has the effect of disabling the morse output.
//-----------------------------------------------------------------------------
void putchar_cw(char s   /* char to transmit */, char wpm)
{
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
	unsigned char temp;
	char cwchr;
	char cwlen;

	// range-limit wpm (can not == 0)
	if(wpm > 0){
 186:	66 23       	and	r22, r22
 188:	09 f4       	brne	.+2      	; 0x18c <putchar_cw+0xc>
 18a:	47 c0       	rjmp	.+142    	; 0x21a <__DATA_REGION_LENGTH__+0x1a>
 18c:	16 2f       	mov	r17, r22
		if(s == ' '){
 18e:	80 32       	cpi	r24, 0x20	; 32
 190:	19 f4       	brne	.+6      	; 0x198 <putchar_cw+0x18>
			// delay 3dahs
			cw_delay(DAH3, wpm);
 192:	89 e0       	ldi	r24, 0x09	; 9
 194:	94 df       	rcall	.-216    	; 0xbe <cw_delay>
 196:	41 c0       	rjmp	.+130    	; 0x21a <__DATA_REGION_LENGTH__+0x1a>
		}else{
			// trap underscore & re-map
			if(s == '_'){
 198:	8f 35       	cpi	r24, 0x5F	; 95
 19a:	d1 f1       	breq	.+116    	; 0x210 <__DATA_REGION_LENGTH__+0x10>
 19c:	8d 35       	cpi	r24, 0x5D	; 93
 19e:	08 f0       	brcs	.+2      	; 0x1a2 <putchar_cw+0x22>
 1a0:	8c e5       	ldi	r24, 0x5C	; 92
			}
			// range limit the input character
			if(s > LAST_CW){
				s = LAST_CW;
			}
			if(s < FIRST_CW){
 1a2:	81 32       	cpi	r24, 0x21	; 33
 1a4:	80 f1       	brcs	.+96     	; 0x206 <__DATA_REGION_LENGTH__+0x6>
				s = LAST_CW;
			}
			// convert character to CW table index
			temp = s - FIRST_CW;
			// extract elements and lengths
			cwchr = cw_table[temp];
 1a6:	2f ed       	ldi	r18, 0xDF	; 223
 1a8:	28 0f       	add	r18, r24
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	f9 01       	movw	r30, r18
 1ae:	e4 56       	subi	r30, 0x64	; 100
 1b0:	ff 4f       	sbci	r31, 0xFF	; 255
 1b2:	d0 81       	ld	r29, Z
			cwlen = cwlen_table[temp];
 1b4:	f9 01       	movw	r30, r18
 1b6:	e0 5a       	subi	r30, 0xA0	; 160
 1b8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ba:	c0 81       	ld	r28, Z
			// pre-process "&"
			if(s == '&'){
 1bc:	86 32       	cpi	r24, 0x26	; 38
 1be:	51 f4       	brne	.+20     	; 0x1d4 <putchar_cw+0x54>
				cw_key(ON);					// Here, '&' is treated as "ES"
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	77 df       	rcall	.-274    	; 0xb2 <cw_key>
				cw_delay(DIT, wpm);			// this code sends an 'E' with a letter space
 1c4:	61 2f       	mov	r22, r17
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	7a df       	rcall	.-268    	; 0xbe <cw_delay>
				cw_key(OFF);				// and the CW table encodes '&' as an 'S' CW character
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	72 df       	rcall	.-284    	; 0xb2 <cw_key>
				cw_delay(LSPC, wpm);
 1ce:	61 2f       	mov	r22, r17
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	75 df       	rcall	.-278    	; 0xbe <cw_delay>
			}
			// process CW character elements
			while(cwlen != 0){
 1d4:	cc 23       	and	r28, r28
 1d6:	99 f0       	breq	.+38     	; 0x1fe <putchar_cw+0x7e>
				cw_key(ON);
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	6b df       	rcall	.-298    	; 0xb2 <cw_key>
				if((cwchr & 0x01) == 0x01){
 1dc:	d0 ff       	sbrs	r29, 0
 1de:	04 c0       	rjmp	.+8      	; 0x1e8 <putchar_cw+0x68>
					// delay dit
					cw_delay(DIT, wpm);
 1e0:	61 2f       	mov	r22, r17
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	6c df       	rcall	.-296    	; 0xbe <cw_delay>
 1e6:	03 c0       	rjmp	.+6      	; 0x1ee <putchar_cw+0x6e>
				}else{
					// delay dah
					cw_delay(DAH, wpm);
 1e8:	61 2f       	mov	r22, r17
 1ea:	83 e0       	ldi	r24, 0x03	; 3
 1ec:	68 df       	rcall	.-304    	; 0xbe <cw_delay>
				}
				cw_key(OFF);
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	60 df       	rcall	.-320    	; 0xb2 <cw_key>
				// inter-element spacing, delay dit
				cw_delay(DIT, wpm);
 1f2:	61 2f       	mov	r22, r17
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	63 df       	rcall	.-314    	; 0xbe <cw_delay>
				// advance to next element
				cwchr >>= 1;
 1f8:	d6 95       	lsr	r29
				cwlen -= 1;
 1fa:	c1 50       	subi	r28, 0x01	; 1
				cw_delay(DIT, wpm);			// this code sends an 'E' with a letter space
				cw_key(OFF);				// and the CW table encodes '&' as an 'S' CW character
				cw_delay(LSPC, wpm);
			}
			// process CW character elements
			while(cwlen != 0){
 1fc:	69 f7       	brne	.-38     	; 0x1d8 <putchar_cw+0x58>
				// advance to next element
				cwchr >>= 1;
				cwlen -= 1;
			}
			// inter-character spacing
			cw_delay(LSPC, wpm);
 1fe:	61 2f       	mov	r22, r17
 200:	83 e0       	ldi	r24, 0x03	; 3
 202:	5d df       	rcall	.-326    	; 0xbe <cw_delay>
		}
	}
	return;
 204:	0a c0       	rjmp	.+20     	; 0x21a <__DATA_REGION_LENGTH__+0x1a>
				s = LAST_CW;
			}
			// convert character to CW table index
			temp = s - FIRST_CW;
			// extract elements and lengths
			cwchr = cw_table[temp];
 206:	d0 91 d7 00 	lds	r29, 0x00D7	; 0x8000d7 <cw_table+0x3b>
			cwlen = cwlen_table[temp];
 20a:	c0 91 9b 00 	lds	r28, 0x009B	; 0x80009b <__DATA_REGION_ORIGIN__+0x3b>
 20e:	e2 cf       	rjmp	.-60     	; 0x1d4 <putchar_cw+0x54>
				s = LAST_CW;
			}
			// convert character to CW table index
			temp = s - FIRST_CW;
			// extract elements and lengths
			cwchr = cw_table[temp];
 210:	d0 91 d6 00 	lds	r29, 0x00D6	; 0x8000d6 <cw_table+0x3a>
			cwlen = cwlen_table[temp];
 214:	c0 91 9a 00 	lds	r28, 0x009A	; 0x80009a <__DATA_REGION_ORIGIN__+0x3a>
 218:	dd cf       	rjmp	.-70     	; 0x1d4 <putchar_cw+0x54>
			// inter-character spacing
			cw_delay(LSPC, wpm);
		}
	}
	return;
}
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	08 95       	ret

00000222 <puts_cw>:
//-----------------------------------------------------------------------------
//	puts_cw() outputs CW translation of input string (ASCII)
//	generally conforms to the puts() prototype with the addition of the wpm param 
//-----------------------------------------------------------------------------
int puts_cw(const char* s /* pointer to string to transmit */, char wpm)
{
 222:	ff 92       	push	r15
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	8c 01       	movw	r16, r24
 22e:	f6 2e       	mov	r15, r22
	char	i;
	char	j;
	char	w=wpm;

	// send each character from string to CW character translator Fn
	while(*s) {
 230:	59 c0       	rjmp	.+178    	; 0x2e4 <__stack+0x85>
		c = *s++;
 232:	e8 01       	movw	r28, r16
 234:	21 96       	adiw	r28, 0x01	; 1
		if(c > LAST_CW){
 236:	8d 35       	cpi	r24, 0x5D	; 93
 238:	08 f4       	brcc	.+2      	; 0x23c <puts_cw+0x1a>
 23a:	4f c0       	rjmp	.+158    	; 0x2da <__stack+0x7b>
			switch(c){
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	fc 01       	movw	r30, r24
 240:	e1 56       	subi	r30, 0x61	; 97
 242:	f1 09       	sbc	r31, r1
 244:	ea 31       	cpi	r30, 0x1A	; 26
 246:	f1 05       	cpc	r31, r1
 248:	08 f0       	brcs	.+2      	; 0x24c <puts_cw+0x2a>
 24a:	4b c0       	rjmp	.+150    	; 0x2e2 <__stack+0x83>
 24c:	e1 5f       	subi	r30, 0xF1	; 241
 24e:	ff 4f       	sbci	r31, 0xFF	; 255
 250:	09 94       	ijmp
			default:
				break;

			case 'b':					// key-down with 1-16 sec of delay, 1-digit decimal param
				cw_key(1);
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	2e df       	rcall	.-420    	; 0xb2 <cw_key>
			case 'a':					// no-key-down with 1-16 sec of delay
				i = *s;
 256:	f8 01       	movw	r30, r16
 258:	81 81       	ldd	r24, Z+1	; 0x01
				if(i) s += 1;			// advance pointer if not the end of string
 25a:	88 23       	and	r24, r24
 25c:	11 f0       	breq	.+4      	; 0x262 <__stack+0x3>
 25e:	e8 01       	movw	r28, r16
 260:	22 96       	adiw	r28, 0x02	; 2
				i &= 0x0f;				// mask low nyb -- this is the #seconds to delay
				cw_delay(i+1, 0);		// delay for i seconds (i = 1-10 for a param of "0" to "9"
 262:	8f 70       	andi	r24, 0x0F	; 15
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	8f 5f       	subi	r24, 0xFF	; 255
 268:	2a df       	rcall	.-428    	; 0xbe <cw_delay>
				cw_key(0);				// de-activate key
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	22 df       	rcall	.-444    	; 0xb2 <cw_key>
				break;
 26e:	8e 01       	movw	r16, r28
 270:	39 c0       	rjmp	.+114    	; 0x2e4 <__stack+0x85>

			case 'z':					// set CW speed, with 2-digit, decimal param
				i = *s;
 272:	f8 01       	movw	r30, r16
 274:	81 81       	ldd	r24, Z+1	; 0x01
				if(i) s += 1;			// advance pointer if not the end of string
 276:	88 23       	and	r24, r24
 278:	19 f0       	breq	.+6      	; 0x280 <__stack+0x21>
 27a:	0e 5f       	subi	r16, 0xFE	; 254
 27c:	1f 4f       	sbci	r17, 0xFF	; 255
 27e:	01 c0       	rjmp	.+2      	; 0x282 <__stack+0x23>
	char	j;
	char	w=wpm;

	// send each character from string to CW character translator Fn
	while(*s) {
		c = *s++;
 280:	8e 01       	movw	r16, r28
				break;

			case 'z':					// set CW speed, with 2-digit, decimal param
				i = *s;
				if(i) s += 1;			// advance pointer if not the end of string
				j = i & 0x0f;			// mask low nyb -- this is the #seconds to delay
 282:	8f 70       	andi	r24, 0x0F	; 15
				j *= 10;
 284:	98 2f       	mov	r25, r24
 286:	99 0f       	add	r25, r25
 288:	99 0f       	add	r25, r25
 28a:	89 0f       	add	r24, r25
 28c:	88 0f       	add	r24, r24
				i = *s;
 28e:	f8 01       	movw	r30, r16
 290:	90 81       	ld	r25, Z
				if(i) s += 1;			// advance pointer if not the end of string				
 292:	99 23       	and	r25, r25
 294:	11 f0       	breq	.+4      	; 0x29a <__stack+0x3b>
 296:	0f 5f       	subi	r16, 0xFF	; 255
 298:	1f 4f       	sbci	r17, 0xFF	; 255
				j = j + (i & 0x0f);		// mask low nyb -- this is the #seconds to delay
 29a:	9f 70       	andi	r25, 0x0F	; 15
 29c:	89 0f       	add	r24, r25
				if((j>(MIN_WPM-1)) && (j<(MAX_WPM+1))){	// only allow 5<=WPM<=31
 29e:	9b ef       	ldi	r25, 0xFB	; 251
 2a0:	98 0f       	add	r25, r24
 2a2:	9a 31       	cpi	r25, 0x1A	; 26
 2a4:	f8 f4       	brcc	.+62     	; 0x2e4 <__stack+0x85>
					wpm_reg = j;
 2a6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
					w = j;
 2aa:	f8 2e       	mov	r15, r24
 2ac:	1b c0       	rjmp	.+54     	; 0x2e4 <__stack+0x85>
				}
				break;

			case 'u':					// ultra-low power
				PORTB = (PORTB & ~PWRMASK) | UPWR;
 2ae:	88 b3       	in	r24, 0x18	; 24
 2b0:	8c 60       	ori	r24, 0x0C	; 12
 2b2:	88 bb       	out	0x18, r24	; 24
	char	j;
	char	w=wpm;

	// send each character from string to CW character translator Fn
	while(*s) {
		c = *s++;
 2b4:	8e 01       	movw	r16, r28
				}
				break;

			case 'u':					// ultra-low power
				PORTB = (PORTB & ~PWRMASK) | UPWR;
				break;
 2b6:	16 c0       	rjmp	.+44     	; 0x2e4 <__stack+0x85>

			case 'l':					// low power (lower-case "L")
				PORTB = (PORTB & ~PWRMASK) | LPWR;
 2b8:	88 b3       	in	r24, 0x18	; 24
 2ba:	83 7f       	andi	r24, 0xF3	; 243
 2bc:	84 60       	ori	r24, 0x04	; 4
 2be:	88 bb       	out	0x18, r24	; 24
	char	j;
	char	w=wpm;

	// send each character from string to CW character translator Fn
	while(*s) {
		c = *s++;
 2c0:	8e 01       	movw	r16, r28
				PORTB = (PORTB & ~PWRMASK) | UPWR;
				break;

			case 'l':					// low power (lower-case "L")
				PORTB = (PORTB & ~PWRMASK) | LPWR;
				break;
 2c2:	10 c0       	rjmp	.+32     	; 0x2e4 <__stack+0x85>

			case 'm':					// med power
				PORTB = (PORTB & ~PWRMASK) | MPWR;
 2c4:	88 b3       	in	r24, 0x18	; 24
 2c6:	83 7f       	andi	r24, 0xF3	; 243
 2c8:	88 60       	ori	r24, 0x08	; 8
 2ca:	88 bb       	out	0x18, r24	; 24
	char	j;
	char	w=wpm;

	// send each character from string to CW character translator Fn
	while(*s) {
		c = *s++;
 2cc:	8e 01       	movw	r16, r28
				PORTB = (PORTB & ~PWRMASK) | LPWR;
				break;

			case 'm':					// med power
				PORTB = (PORTB & ~PWRMASK) | MPWR;
				break;
 2ce:	0a c0       	rjmp	.+20     	; 0x2e4 <__stack+0x85>

			case 'h':					// hi power
				PORTB = (PORTB & ~PWRMASK) | HPWR;
 2d0:	88 b3       	in	r24, 0x18	; 24
 2d2:	83 7f       	andi	r24, 0xF3	; 243
 2d4:	88 bb       	out	0x18, r24	; 24
	char	j;
	char	w=wpm;

	// send each character from string to CW character translator Fn
	while(*s) {
		c = *s++;
 2d6:	8e 01       	movw	r16, r28
				PORTB = (PORTB & ~PWRMASK) | MPWR;
				break;

			case 'h':					// hi power
				PORTB = (PORTB & ~PWRMASK) | HPWR;
				break;
 2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <__stack+0x85>
			}
		}else{
			putchar_cw(c, w);
 2da:	6f 2d       	mov	r22, r15
 2dc:	51 df       	rcall	.-350    	; 0x180 <putchar_cw>
	char	j;
	char	w=wpm;

	// send each character from string to CW character translator Fn
	while(*s) {
		c = *s++;
 2de:	8e 01       	movw	r16, r28
 2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <__stack+0x85>
 2e2:	8e 01       	movw	r16, r28
	char	i;
	char	j;
	char	w=wpm;

	// send each character from string to CW character translator Fn
	while(*s) {
 2e4:	f8 01       	movw	r30, r16
 2e6:	80 81       	ld	r24, Z
 2e8:	81 11       	cpse	r24, r1
 2ea:	a3 cf       	rjmp	.-186    	; 0x232 <puts_cw+0x10>
		}else{
			putchar_cw(c, w);
		}
	}
	return(1);
}
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	ff 90       	pop	r15
 2fa:	08 95       	ret

000002fc <__divmodsi4>:
 2fc:	05 2e       	mov	r0, r21
 2fe:	97 fb       	bst	r25, 7
 300:	16 f4       	brtc	.+4      	; 0x306 <__divmodsi4+0xa>
 302:	00 94       	com	r0
 304:	0f d0       	rcall	.+30     	; 0x324 <__negsi2>
 306:	57 fd       	sbrc	r21, 7
 308:	05 d0       	rcall	.+10     	; 0x314 <__divmodsi4_neg2>
 30a:	14 d0       	rcall	.+40     	; 0x334 <__udivmodsi4>
 30c:	07 fc       	sbrc	r0, 7
 30e:	02 d0       	rcall	.+4      	; 0x314 <__divmodsi4_neg2>
 310:	46 f4       	brtc	.+16     	; 0x322 <__divmodsi4_exit>
 312:	08 c0       	rjmp	.+16     	; 0x324 <__negsi2>

00000314 <__divmodsi4_neg2>:
 314:	50 95       	com	r21
 316:	40 95       	com	r20
 318:	30 95       	com	r19
 31a:	21 95       	neg	r18
 31c:	3f 4f       	sbci	r19, 0xFF	; 255
 31e:	4f 4f       	sbci	r20, 0xFF	; 255
 320:	5f 4f       	sbci	r21, 0xFF	; 255

00000322 <__divmodsi4_exit>:
 322:	08 95       	ret

00000324 <__negsi2>:
 324:	90 95       	com	r25
 326:	80 95       	com	r24
 328:	70 95       	com	r23
 32a:	61 95       	neg	r22
 32c:	7f 4f       	sbci	r23, 0xFF	; 255
 32e:	8f 4f       	sbci	r24, 0xFF	; 255
 330:	9f 4f       	sbci	r25, 0xFF	; 255
 332:	08 95       	ret

00000334 <__udivmodsi4>:
 334:	a1 e2       	ldi	r26, 0x21	; 33
 336:	1a 2e       	mov	r1, r26
 338:	aa 1b       	sub	r26, r26
 33a:	bb 1b       	sub	r27, r27
 33c:	fd 01       	movw	r30, r26
 33e:	0d c0       	rjmp	.+26     	; 0x35a <__udivmodsi4_ep>

00000340 <__udivmodsi4_loop>:
 340:	aa 1f       	adc	r26, r26
 342:	bb 1f       	adc	r27, r27
 344:	ee 1f       	adc	r30, r30
 346:	ff 1f       	adc	r31, r31
 348:	a2 17       	cp	r26, r18
 34a:	b3 07       	cpc	r27, r19
 34c:	e4 07       	cpc	r30, r20
 34e:	f5 07       	cpc	r31, r21
 350:	20 f0       	brcs	.+8      	; 0x35a <__udivmodsi4_ep>
 352:	a2 1b       	sub	r26, r18
 354:	b3 0b       	sbc	r27, r19
 356:	e4 0b       	sbc	r30, r20
 358:	f5 0b       	sbc	r31, r21

0000035a <__udivmodsi4_ep>:
 35a:	66 1f       	adc	r22, r22
 35c:	77 1f       	adc	r23, r23
 35e:	88 1f       	adc	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	1a 94       	dec	r1
 364:	69 f7       	brne	.-38     	; 0x340 <__udivmodsi4_loop>
 366:	60 95       	com	r22
 368:	70 95       	com	r23
 36a:	80 95       	com	r24
 36c:	90 95       	com	r25
 36e:	9b 01       	movw	r18, r22
 370:	ac 01       	movw	r20, r24
 372:	bd 01       	movw	r22, r26
 374:	cf 01       	movw	r24, r30
 376:	08 95       	ret

00000378 <_exit>:
 378:	f8 94       	cli

0000037a <__stop_program>:
 37a:	ff cf       	rjmp	.-2      	; 0x37a <__stop_program>
